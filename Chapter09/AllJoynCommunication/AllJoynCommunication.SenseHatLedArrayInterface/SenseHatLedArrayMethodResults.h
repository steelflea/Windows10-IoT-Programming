//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

using namespace concurrency;

namespace com { namespace iot { namespace SenseHatLedArray {

ref class SenseHatLedArrayConsumer;

public ref class SenseHatLedArrayDrawShapeResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static SenseHatLedArrayDrawShapeResult^ CreateSuccessResult()
    {
        auto result = ref new SenseHatLedArrayDrawShapeResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static SenseHatLedArrayDrawShapeResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SenseHatLedArrayDrawShapeResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class SenseHatLedArrayTurnOffResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static SenseHatLedArrayTurnOffResult^ CreateSuccessResult()
    {
        auto result = ref new SenseHatLedArrayTurnOffResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static SenseHatLedArrayTurnOffResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SenseHatLedArrayTurnOffResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class SenseHatLedArrayJoinSessionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property SenseHatLedArrayConsumer^ Consumer
    {
        SenseHatLedArrayConsumer^ get() { return m_consumer; }
    internal:
        void set(_In_ SenseHatLedArrayConsumer^ value) { m_consumer = value; }
    };

private:
    int32 m_status;
    SenseHatLedArrayConsumer^ m_consumer;
};

public ref class SenseHatLedArrayGetShapeResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property byte Shape
    {
        byte get() { return m_value; }
    internal:
        void set(_In_ byte value) { m_value = value; }
    }

    static SenseHatLedArrayGetShapeResult^ CreateSuccessResult(_In_ byte value)
    {
        auto result = ref new SenseHatLedArrayGetShapeResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Shape = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static SenseHatLedArrayGetShapeResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SenseHatLedArrayGetShapeResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    byte m_value;
};

} } } 
